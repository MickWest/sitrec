// server-side specific configuration

import {md5} from 'js-md5';
import {SITREC_CACHE, SITREC_SERVER} from "./src/configUtils";

//////////////////////////////////////////////////////////////////////////////////////////////////////

console.log("SETTING _configParams");
// note, don't use this _configParams in the code, use configParams from login.js
export const _configParams = {

    rehostRequiresLogin: true,

    // This is the default map type if none specificed in the Sit file
    defaultMapType: "NRL_WMTS", //"NRL_WMTS",

    customMapSources: {

        mapbox: {
            name: "MapBox",
            mapURL: (z, x, y, layer) => {
                // let's try get the md5 hash of the URL

                const url = `https://api.mapbox.com/v4/mapbox.${layer}/${z}/${x}/${y}@2x.jpg80`;
                const urlMD5 = md5(url);


                // This calculates the correct DIRECT URL for the cache
                // so we can try this first and if it fails, then try the server
                // this is much faster than trying the server first
                // we add "?prefetch=1" to the URL to ensure it's a different cached version
                // to the one that is returned from cachemaps.php
                // otherwise Cloudflare and others will think it's not there even after
                // cachemaps.php has cached it
                const url1 = SITREC_CACHE + urlMD5 + ".jpg" + "?prefetch=1";

                // and this the the request to the server to cache it
                // if url1 does not exist then try url2
                const url2 = SITREC_SERVER + "cachemaps.php?url=" +
                    encodeURIComponent(url)

                return[url1, url2];
            },
            layers: {
                "satellite": {
                    type: "jpg", //not used here yet
                }
            },
            layer: "satellite"
        },
        osm: {
            name: "Open Streetmap",
            mapURL: (z,x,y) => {
                return SITREC_SERVER+"cachemaps.php?url=" + encodeURIComponent(`https://c.tile.openstreetmap.org/${z}/${x}/${y}.png`)
            },
        },
        maptiler: {
            name: "MapTiler",

            // TODO - layers NEED TO include more info, like
            // MinZoom, MaxZoom, image format (png, jpg, etc)
            // e.g. here basic-v2 is png, 0-22, etc.
            // but satellite-v2 is jpg, so we need to have the correct extension in the URL

            layers: {
                "satellite-v2": {
                    minZoom: 0,
                    maxZoom: 22,
                    type: "jpg",
                },
                "satellite-mediumres": {
                    minZoom: 0,
                    maxZoom: 22,
                    type: "jpg",
                },


            },

            mapURL: (z,x,y, layerName, layerType) => {
                return(`https://api.maptiler.com/tiles/${layerName}/${z}/${x}/${y}.${layerType}?key=cnVJFChj7wZSQz7jBJvR`); // key is metabunk specific - replace with your own
            },
        },
        eox: {
            name: "EOX",
            mapURL: (z,x,y) => {
                return SITREC_SERVER+"cachemaps.php?url=" + encodeURIComponent(`https://tiles.maps.eox.at/wmts?layer=s2cloudless_3857&style=default&tilematrixset=g&Service=WMTS&Request=GetTile&Version=1.0.0&Format=image%2Fjpeg&TileMatrix=${z}&TileCol=${x}&TileRow=${y}`)
            },
        },

        // Try make this just use the base url https://geoint.nrlssc.org/nrltileserver/wms/category/Imagery
        // or perhaps just the capabilities URL?

        NRL_WMS: {
            name: "Naval Research Laboratory WMS",
            mapURL: function (z,x,y, layerName, layerType) {
                return this.mapProjectionTextures.wmsGetMapURLFromTile("https://geoint.nrlssc.org/nrltileserver/wms/category/Imagery?",layerName,z,x,y);
            },
            capabilities: "https://geoint.nrlssc.org/nrltileserver/wms/category/Imagery?REQUEST=GetCapabilities&SERVICE=WMS",
            layer: "ImageryMosaic",
        },

        NRL_WMTS: {
            name: "Naval Research Laboratory WMS Tile",

            mapURL: function (z,x,y,  layerName, layerType) {
                return this.mapProjectionTextures.wmtsGetMapURLFromTile("https://geoint.nrlssc.org/nrltileserver/wmts",layerName,z,x,y);
            },
            capabilities: "https://geoint.nrlssc.org/nrltileserver/wmts?REQUEST=GetCapabilities&VERSION=1.0.0&SERVICE=WMTS",
            layer: "BlueMarble_AUTO",
            mapping: 4326,
        },

    },

    customElevationSources: {
        AWS_Terrarium: {
            name: "AWS Terrarium",
//            url: "https://s3.amazonaws.com/elevation-tiles-prod/terrarium/{z}/{x}/{y}.tif",
//            url: "https://s3.amazonaws.com/elevation-tiles-prod/terrarium",

            mapURL: (z,x,y) => {
                return `https://s3.amazonaws.com/elevation-tiles-prod/terrarium/${z}/${x}/${y}.png`
            },

            maxZoom: 14,
            minZoom: 0,
            tileSize: 256,
            attribution: "AWS Terrarium Elevation Data",
        },

        NationalMap: {
            name: "National Map 3DEP GeoTIFF",
            // here's a working example URL
            // https://elevation.nationalmap.gov/arcgis/rest/services/3DEPElevation/ImageServer/exportImage?f=image&format=tiff&bbox=-118.5,33.3,-118.3,33.5&bboxSR=4326&imageSR=4326&size=500,500
            mapURL: function (z,x,y, layerName, layerType) {
                return this.mapProjectionElevation.getWMSGeoTIFFURLFromTile("https://elevation.nationalmap.gov/arcgis/rest/services/3DEPElevation/ImageServer/exportImage",z,x,y);
            },
            maxZoom: 14,
            minZoom: 0,
            tileSize: 256,
            attribution: "National Map 3DEP GeoTIFF",
            mapping: 4326,
        }

    },

    extraHelpLinks: {
        "ADS-B Helper Chatbot": "https://www.chatbase.co/chatbot-iframe/xPKq8RfpIPtnNw_dptU4p",
        "ADSBExchange": "https://globe.adsbexchange.com/",
        "FlightAware": "https://flightaware.com/",
        "PlaneFinder": "https://planefinder.net/",
    },

};

////////////////////////////////////////////////
// / Gimbal, GoFast, flir1, agua, dume, video, hayle, 29palms, SWR, kml, kansas,
// aa2292, lakemichigan, chilean, porterville, folsomlake, n14aq, swr, swrcss
// modelinspector, custom
// This is the sitch that is loaded when running on local
export const localSituation = "custom";
//////////////////////////////////////////////