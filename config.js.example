// HOST and LOCAL are the root locations of Sitrec
// HOST = Remote host, like metabunk.org
// LOCAL = My dev machine, for development and debugging
// note my local is in dist, one level deeper than the HOST because I run directly from the dev build

import {md5} from 'js-md5';
import {isConsole} from "./src/configUtils";
//import {getConfigFromServer} from "./src/configUtils";


let port = "";

if (!isConsole) {
    port = window.location.port;
    if (port) {
        port = ":" + port;
    }
}


// SITREC_DOMAIN is the domain of the sever we are uploaded to
// e.g. https://www.metabunk.org/ or https://localhost/
export const SITREC_DOMAIN = (isConsole ? "https://localhost/" : window.location.origin)

// Config.js is part of the sitrec package, so window.location.pathname will be the path to the sitrec package
let SITREC_PATH          = window.location.pathname;

let SITREC_APP_PATH      = SITREC_PATH;
// strip off anything after the last slash
SITREC_APP_PATH = SITREC_APP_PATH.substring(0, SITREC_APP_PATH.lastIndexOf("/")+1);

let SITREC_SERVER_PATH   = SITREC_APP_PATH  + "sitrecServer/";
export const SITREC_SERVER = SITREC_DOMAIN + port + SITREC_SERVER_PATH;



// SITREC_APP is the path to the sitrec application
// e.g. /sitrec/ or /sitrec-dev/
export const SITREC_APP = isConsole
    ? "./sitrec/" // When running as a console application, use a relative path.
    : SITREC_DOMAIN + port + SITREC_APP_PATH;




// TEMP
export const SITREC_DEV_DOMAIN = "www.metabunk.org"


export let SITREC_UPLOAD = null;
export let SITREC_CACHE = null;

// const serverConfig = await getConfigFromServer();
// if (serverConfig !== null) {
//     SITREC_SERVER = serverConfig.SERVER;
//     SITREC_UPLOAD = serverConfig.UPLOAD;
//     SITREC_CACHE = serverConfig.CACHE;
// }



    // log all the exported variables
console.log("SITREC_DOMAIN: ", SITREC_DOMAIN);
console.log("SITREC_APP: ", SITREC_APP);

console.log("SITREC_SERVER: ", SITREC_SERVER);
console.log("SITREC_UPLOAD: ", SITREC_UPLOAD);
console.log("SITREC_CACHE: ", SITREC_CACHE);
console.log("SITREC_DEV_DOMAIN: ", SITREC_DEV_DOMAIN);







// strip off everything from the index of the second to last slash, to the end
// this will leave the path to the directory above the sitrec package
let SITREC_DATA_PATH = SITREC_PATH; // default to the same directory as the sitrec package

if (SITREC_PATH.lastIndexOf("/") > 0) { // but anything other than the root directory needs to be the parent directory
    // first remove everything after the LAST slash, including the slash
    SITREC_DATA_PATH = SITREC_DATA_PATH.substring(0, SITREC_DATA_PATH.lastIndexOf("/"));
    // the remove everything after the second to last slash, but leave it alone
    SITREC_DATA_PATH = SITREC_DATA_PATH.substring(0, SITREC_DATA_PATH.lastIndexOf("/")+1);
}

// Paths relative to the domain.
// you can optionally have a different set of paths for local and/or console

let UPLOAD_PATH          = SITREC_DATA_PATH + "sitrec-upload/";
let CACHE_PATH           = SITREC_DATA_PATH + "sitrec-cache/";

SITREC_UPLOAD = SITREC_DOMAIN + port + UPLOAD_PATH;
SITREC_CACHE  = SITREC_DOMAIN + port + CACHE_PATH;

// log all the exported variables
console.log("SITREC_DOMAIN: ", SITREC_DOMAIN);
console.log("SITREC_APP: ", SITREC_APP);
console.log("SITREC_SERVER: ", SITREC_SERVER);
console.log("SITREC_UPLOAD: ", SITREC_UPLOAD);
console.log("SITREC_CACHE: ", SITREC_CACHE);
console.log("SITREC_DEV_DOMAIN: ", SITREC_DEV_DOMAIN);




//////////////////////////////////////////////////////////////////////////////////////////////////////

console.log("SETTING _configParams");
// note, don't use this _configParams in the code, use configParams from login.js
// as it's a global variable that is set up in login.js
// and that handles the case where _configParams is not defined
export const _configParams = {
    rehostRequiresLogin: true,

    customMapSources: {

        mapbox: {
            name: "MapBox",
            mapURL: (z, x, y, layer) => {
                // let's try get the md5 hash of the URL

                const url = `https://api.mapbox.com/v4/mapbox.${layer}/${z}/${x}/${y}@2x.jpg80`;
                const urlMD5 = md5(url);


                // This calculates the correct DIRECT URL for the cache
                // so we can try this first and if it fails, then try the server
                // this is much faster than trying the server first
                // we add "?prefetch=1" to the URL to ensure it's a different cached version
                // to the one that is returned from cachemaps.php
                // otherwise Cloudflare and others will think it's not there even after
                // cachemaps.php has cached it
                const url1 = SITREC_CACHE + urlMD5 + ".jpg" + "?prefetch=1";

                // and this the the request to the server to cache it
                // if url1 does not exist then try url2
                const url2 = SITREC_SERVER + "cachemaps.php?url=" +
                    encodeURIComponent(url)

                return[url1, url2];
            },
            layers: {
                "satellite": {
                    type: "jpg", //not used here yet
                }
            },
            layer: "satellite"
        },
        osm: {
            name: "Open Streetmap",
            mapURL: (z,x,y) => {
                return SITREC_SERVER+"cachemaps.php?url=" + encodeURIComponent(`https://c.tile.openstreetmap.org/${z}/${x}/${y}.png`)
            },
        },
        maptiler: {
            name: "MapTiler",

            // TODO - layers NEED TO include more info, like
            // MinZoom, MaxZoom, image format (png, jpg, etc)
            // e.g. here basic-v2 is png, 0-22, etc.
            // but satellite-v2 is jpg, so we need to have the correct extension in the URL

            layers: {
                "satellite-v2": {
                    minZoom: 0,
                    maxZoom: 22,
                    type: "jpg",
                },
                "satellite-mediumres": {
                    minZoom: 0,
                    maxZoom: 22,
                    type: "jpg",
                },


            },

            mapURL: (z,x,y, layerName, layerType) => {
                return(`https://api.maptiler.com/tiles/${layerName}/${z}/${x}/${y}.${layerType}?key=cnVJFChj7wZSQz7jBJvR`); // key is metabunk specific - replace with your own
            },
        },
        eox: {
            name: "EOX",
            mapURL: (z,x,y) => {
                return SITREC_SERVER+"cachemaps.php?url=" + encodeURIComponent(`https://tiles.maps.eox.at/wmts?layer=s2cloudless_3857&style=default&tilematrixset=g&Service=WMTS&Request=GetTile&Version=1.0.0&Format=image%2Fjpeg&TileMatrix=${z}&TileCol=${x}&TileRow=${y}`)
            },
        },

        // Try make this just use the base url https://geoint.nrlssc.org/nrltileserver/wms/category/Imagery
        // or perhaps just the capabilities URL?

        NRL_WMS: {
            name: "Naval Research Laboratory WMS",
            mapURL: function (z,x,y, layerName, layerType) {
                return this.mapProjectionTextures.wmsGetMapURLFromTile("https://geoint.nrlssc.org/nrltileserver/wms/category/Imagery?",layerName,z,x,y);
            },
            capabilities: "https://geoint.nrlssc.org/nrltileserver/wms/category/Imagery?REQUEST=GetCapabilities&SERVICE=WMS",
            layer: "ImageryMosaic",

        },

        NRL_WMTS: {
            name: "Naval Research Laboratory WMS Tile",

            mapURL: function (z,x,y,  layerName, layerType) {
                return this.mapProjectionTextures.wmtsGetMapURLFromTile("https://geoint.nrlssc.org/nrltileserver/wmts",layerName,z,x,y);
            },
            capabilities: "https://geoint.nrlssc.org/nrltileserver/wmts?REQUEST=GetCapabilities&VERSION=1.0.0&SERVICE=WMTS",
            layer: "BlueMarble_AUTO",
            mapping: 4326,

        },

    },

    customElevationSources: {
        AWS_Terrarium: {
            name: "AWS Terrarium",
//            url: "https://s3.amazonaws.com/elevation-tiles-prod/terrarium/{z}/{x}/{y}.tif",
//            url: "https://s3.amazonaws.com/elevation-tiles-prod/terrarium",

            mapURL: (z,x,y) => {
                return `https://s3.amazonaws.com/elevation-tiles-prod/terrarium/${z}/${x}/${y}.png`
            },

            maxZoom: 14,
            minZoom: 0,
            tileSize: 256,
            attribution: "AWS Terrarium Elevation Data",
        },

        NationalMap: {
            name: "National Map 3DEP GeoTIFF",
            // here's a working example URL
            // https://elevation.nationalmap.gov/arcgis/rest/services/3DEPElevation/ImageServer/exportImage?f=image&format=tiff&bbox=-118.5,33.3,-118.3,33.5&bboxSR=4326&imageSR=4326&size=500,500
            mapURL: function (z,x,y, layerName, layerType) {
                return this.mapProjectionElevation.getWMSGeoTIFFURLFromTile("https://elevation.nationalmap.gov/arcgis/rest/services/3DEPElevation/ImageServer/exportImage",z,x,y);
            },
            maxZoom: 14,
            minZoom: 0,
            tileSize: 256,
            attribution: "National Map 3DEP GeoTIFF",
            mapping: 4326,


        }

    },

    extraHelpLinks: {
        "ADS-B Helper Chatbot": "https://www.chatbase.co/chatbot-iframe/xPKq8RfpIPtnNw_dptU4p",
        "ADSBExchange": "https://globe.adsbexchange.com/",
        "FlightAware": "https://flightaware.com/",
        "PlaneFinder": "https://planefinder.net/",
    },



};

// isLocal = false;

////////////////////////////////////////////////
// / Gimbal, GoFast, flir1, agua, dume, video, hayle, 29palms, SWR, kml, kansas,
// aa2292, lakemichigan, chilean, porterville, folsomlake, n14aq, swr, swrcss
// modelinspector, custom
// This is the sitch that is loaded when running on local
export const localSituation = "custom";
//////////////////////////////////////////////